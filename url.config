/**
 * Shared file between builds so that they can all use the same dependency and maven repositories.
 * https://developer.android.google.cn/jetpack/androidx/versions
 **/
https://developer.android.google.cn/jetpack/androidx/releases/activity
dependencies {
    def activity_version = "1.0.0"

    // Java
    implementation "androidx.activity:activity:$activity_version"
    // Kotlin
    implementation "androidx.activity:activity-ktx:$activity_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/ads
dependencies {
    implementation 'androidx.ads:ads-identifier:1.0.0-alpha01'

    // Optional - add if you're using Guava to handle
    // return values of type ListenableFuture.
    implementation 'com.google.guava:guava:28.0-android'
}
https://developer.android.google.cn/jetpack/androidx/releases/annotation
https://developer.android.google.cn/jetpack/androidx/releases/appcompat
dependencies {
    def appcompat_version = "1.1.0"

    implementation "androidx.appcompat:appcompat:$appcompat_version"
    // For loading and tinting drawables on older versions of the platform
    implementation "androidx.appcompat:appcompat-resources:$appcompat_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/arch
https://developer.android.google.cn/jetpack/androidx/releases/asynclayoutinflater
https://developer.android.google.cn/jetpack/androidx/releases/autofill
dependencies {
    def autofill_version = "1.0.0-beta01"

    implementation "androidx.autofill:autofill:$autofill_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/benchmark
dependencies {
    androidTestImplementation
    "androidx.benchmark:benchmark-junit4:1.0.0-alpha06"
}

android {
    ...
    defaultConfig {
        ...
        testInstrumentationRunner "androidx.benchmark.junit4.AndroidBenchmarkRunner"
    }
}
https://developer.android.google.cn/jetpack/androidx/releases/biometric
dependencies {
    def biometric_version = "1.0.0-beta01"

    implementation "androidx.biometric:biometric:$biometric_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/browser
dependencies {
    def browser_version = "1.2.0-alpha08"

    implementation "androidx.browser:browser:$browser_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/camera
dependencies {
    // CameraX core library
    def camerax_version = "1.0.0-alpha05"
    // CameraX view library
    def camerax_view_version = "1.0.0-alpha02"
    // CameraX extensions library
    def camerax_ext_version = "1.0.0-alpha02"
    implementation "androidx.camera:camera-core:$camerax_version"
    // If you want to use Camera2 extensions
    implementation "androidx.camera:camera-camera2:$camerax_version"
    // If you to use the Camera View class
    implementation "androidx.camera:camera-view:$camerax_view_version"
    // If you to use Camera Extensions
    implementation "androidx.camera:camera-extensions:$camerax_ext_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/car
https://developer.android.google.cn/jetpack/androidx/releases/cardview
https://developer.android.google.cn/jetpack/androidx/releases/collection
dependencies {
    def collection_version = "1.1.0"

    // Java
    implementation "androidx.collection:collection:$collection_version"
    // Kotlin
    implementation "androidx.collection:collection-ktx:$collection_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/concurrent
dependencies {
    def futures_version = "1.0.0-rc01"
    implementation "androidx.concurrent:concurrent-futures:$futures_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/constraintlayout
https://developer.android.google.cn/jetpack/androidx/releases/contentpager
https://developer.android.google.cn/jetpack/androidx/releases/coordinatorlayout
https://developer.android.google.cn/jetpack/androidx/releases/core
dependencies {
    def core_version = "1.1.0"

    // Java
    implementation "androidx.core:core:$core_version"
    // Kotlin
    implementation "androidx.core:core-ktx:$core_version"

    // To use RoleManagerCompat
    def core_role_version = "1.0.0-alpha01"
    implementation "androidx.core:core-role:$core_role_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/cursoradapter
https://developer.android.google.cn/jetpack/androidx/releases/customview
https://developer.android.google.cn/jetpack/androidx/releases/databinding
android {
    ...
    dataBinding {
        enabled = true
    }
}
https://developer.android.google.cn/jetpack/androidx/releases/documentfile
https://developer.android.google.cn/jetpack/androidx/releases/drawerlayout
https://developer.android.google.cn/jetpack/androidx/releases/dynamicanimation
https://developer.android.google.cn/jetpack/androidx/releases/emoji
https://developer.android.google.cn/jetpack/androidx/releases/enterprise
dependencies {
    def enterprise_version = "1.0.0-beta01"

    implementation "androidx.enterprise:enterprise-feedback:$enterprise_version"
    // For testing enterprise feedback in isolation
    implementation "androidx.enterprise:enterprise-feedback-testing:$enterprise_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/exifinterface
https://developer.android.google.cn/jetpack/androidx/releases/fragment
dependencies {
    def fragment_version = "1.1.0"

    // Java
    implementation "androidx.fragment:fragment:$fragment_version"
    // Kotlin
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    // Testing Fragments in Isolation
    implementation "androidx.fragment:fragment-testing:$fragment_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/gridlayout
https://developer.android.google.cn/jetpack/androidx/releases/heifwriter
https://developer.android.google.cn/jetpack/androidx/releases/interpolator
https://developer.android.google.cn/jetpack/androidx/releases/leanback
https://developer.android.google.cn/jetpack/androidx/releases/legacy
https://developer.android.google.cn/jetpack/androidx/releases/lifecycle
dependencies {
    def lifecycle_version = "2.1.0"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    // alternatively - just ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // For Kotlin use lifecycle-viewmodel-ktx
    // alternatively - just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI
    //     AndroidX libraries use this lightweight import for Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"

    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // For Kotlin use kapt instead of annotationProcessor
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"
    // For Kotlin use lifecycle-reactivestreams-ktx

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/loader
https://developer.android.google.cn/jetpack/androidx/releases/localbroadcastmanager
https://developer.android.google.cn/jetpack/androidx/releases/media
dependencies {
    def media_version = "1.1.0"

    implementation "androidx.media:media:$media_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/media2
dependencies {
    def media2_version = "1.0.0"

    // Interacting with MediaSessions
    implementation "androidx.media2:media2-session:$media2_version"
    // optional - UI widgets for VideoView and MediaControlView
    implementation "androidx.media2:media2-widget:$media2_version"
    // optional - Implementation of a SessionPlayer
    implementation "androidx.media2:media2-player:$media2_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/mediarouter
dependencies {
    def mediarouter_version = "1.1.0"

    implementation "androidx.mediarouter:mediarouter:$mediarouter_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/multidex
https://developer.android.google.cn/jetpack/androidx/releases/navigation
dependencies {
    def nav_version = "2.1.0"

    // Java
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"

    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

}
https://developer.android.google.cn/jetpack/androidx/releases/paging
dependencies {
    def paging_version = "2.1.0"

    implementation "androidx.paging:paging-runtime:$paging_version"
    // For Kotlin use paging-runtime-ktx

    // alternatively - without Android dependencies for testing
    testImplementation "androidx.paging:paging-common:$paging_version"
    // For Kotlin use paging-common-ktx

    // optional - RxJava support
    implementation "androidx.paging:paging-rxjava2:$paging_version"
    // For Kotlin use paging-rxjava2-ktx
}
https://developer.android.google.cn/jetpack/androidx/releases/palette
https://developer.android.google.cn/jetpack/androidx/releases/percentlayout
https://developer.android.google.cn/jetpack/androidx/releases/preference
dependencies {
    def preference_version = "1.1.0"

    // Java
    implementation "androidx.preference:preference:$preference_version"
    // Kotlin
    implementation "androidx.preference:preference-ktx:$preference_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/print
https://developer.android.google.cn/jetpack/androidx/releases/recommendation
https://developer.android.google.cn/jetpack/androidx/releases/recyclerview
https://developer.android.google.cn/jetpack/androidx/releases/remotecallback
https://developer.android.google.cn/jetpack/androidx/releases/room
dependencies {
    def room_version = "2.2.0-rc01"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"

    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/savedstate
https://developer.android.google.cn/jetpack/androidx/releases/security
dependencies {
    def security_version = "1.0.0-alpha02"
    implementation "androidx.security:security-crypto:$security_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/sharetarget
dependencies {
    def sharetarget_version = "1.0.0-beta01"

    implementation "androidx.sharetarget:sharetarget:$sharetarget_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/slice
https://developer.android.google.cn/jetpack/androidx/releases/slidingpanelayout
https://developer.android.google.cn/jetpack/androidx/releases/sqlite
https://developer.android.google.cn/jetpack/androidx/releases/swiperefreshlayout
https://developer.android.google.cn/jetpack/androidx/releases/test
https://developer.android.google.cn/jetpack/androidx/releases/textclassifier
https://developer.android.google.cn/jetpack/androidx/releases/transition
https://developer.android.google.cn/jetpack/androidx/releases/tvprovider
https://developer.android.google.cn/jetpack/androidx/releases/vectordrawable
https://developer.android.google.cn/jetpack/androidx/releases/versionedparcelable
https://developer.android.google.cn/jetpack/androidx/releases/viewpager
https://developer.android.google.cn/jetpack/androidx/releases/viewpager2
dependencies {
    implementation "androidx.viewpager2:viewpager2:1.0.0-beta04"
}
https://developer.android.google.cn/jetpack/androidx/releases/wear
https://developer.android.google.cn/jetpack/androidx/releases/webkit
https://developer.android.google.cn/jetpack/androidx/releases/work
dependencies {
    def work_version = "2.2.0"

    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"

    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"

    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:$work_version"

    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:$work_version"
}
https://developer.android.google.cn/jetpack/androidx/releases/jetifier